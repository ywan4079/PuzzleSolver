/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package puzzlesolver;

import java.awt.Color;
import java.awt.Frame;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.image.BufferedImage;
import java.io.*;
import java.util.*;

import javax.imageio.ImageIO;
import javax.swing.JFrame;

public class App {

    public static int WIDTH;
    public static int HEIGHT;
    public static int pixel_size = 100;
    public static List<Color[][]> finished_puzzles = new ArrayList<>();
    public static JFrame frame = new JFrame("Visualization of puzzle solver");
    public static boolean show_window = true;
    public static void main(String[] args) throws Exception {

        // Start time
        long startTime = System.currentTimeMillis();

        // Read puzzles
        List<List<String>> records = new ArrayList<List<String>>();

        try (BufferedReader br = new BufferedReader(new FileReader("./../puzzles.csv"))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] values = line.split(",");
                records.add(Arrays.asList(values));
            }
            br.close();
        } catch (Exception e) {
            e.getStackTrace();
            System.out.println("Error occurred while reading puzzles document");
        }

        // Create puzzles
        List<Puzzle> puzzles = new ArrayList<>();
        for(int i = 1; i < records.size(); i++) {
            puzzles.add(new Puzzle(records.get(i).get(0), records.get(i).get(1), records.get(i).get(2), records.get(i).get(3)));
        }

        // Read frame size
        try {
            File f = new File("./../frame_size.txt");
            Scanner reader = new Scanner(f);
            String[] size = reader.nextLine().split(" ");
            WIDTH = Integer.parseInt(size[0]);
            HEIGHT = Integer.parseInt(size[1]);
            reader.close();
        } catch (Exception e) {
            e.getStackTrace();
            System.out.println("Error occurred while reading frame size document");
        }

        // Check if all puzzles can fit in the frame
        int area_sum = 0;
        for(Puzzle p : puzzles) area_sum += p.area;
        if(WIDTH*HEIGHT != area_sum) throw new Exception("It's impossible to fit in all puzzles in the given frame. Please either change the size of puzzles or frame.");

        // Set up frame
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        //Display the window
        frame.setSize(WIDTH*pixel_size, HEIGHT*pixel_size);
        WindowListener listener = new WindowAdapter() {
            public void windowClosing(WindowEvent evt) {
                show_window = false;
             }
        };
        frame.addWindowListener(listener);
        frame.setVisible(true);
        
        
        int solution = Solver.solve(WIDTH, HEIGHT, puzzles);
        if(WIDTH != HEIGHT) {
            System.out.println("Because the frame is not a square, we need to calculate the frame in another direction.");
            solution += Solver.solve(HEIGHT, WIDTH, puzzles);
        }

        frame.setVisible(false);

        System.out.println(solution + " solutions found");

        // End time
        long endTime = System.currentTimeMillis();

        long time_taken = (endTime - startTime)/1000; // in sec
        String  hours = String.valueOf(time_taken/3600), mins = String.valueOf((time_taken/60)%60), sec = String.valueOf(time_taken%60);
        if(hours.length() == 1) hours = "0" + hours;
        if(mins.length() == 1) mins = "0" + mins;
        if(sec.length() == 1) sec = "0" + sec;
        System.out.println("Processing time: " + hours + ":" + mins + ":" + sec);


        Scanner scanner = new Scanner(System.in);
        System.out.println("Do you want to get the images of these solutions?([y]/n)");
        while(true) {
            String response = scanner.nextLine();
            if(response.toLowerCase().equals("y") || response.toLowerCase().equals("")){
                // Clear images in solutions folder
                System.out.println("The images in solutions folder are going to be removed. Please back up if required. (Press any key to continue)");
                scanner.nextLine();
                System.out.println("Clear images in solutions folder...");
                int counter = 1;
                while (new File("./../solutions/" + counter++ + ".jpg").delete()) {
                    
                }

                int num_pic;
                System.out.println("How many pictures do you want?");
                while (true) {
                    String input = scanner.next();
                    try {
                        num_pic = Integer.parseInt(input);
                        if(num_pic < 0 || num_pic > solution){
                            System.out.println("Please enter a valid integer");
                            continue;
                        }
                        break;
                    } catch (Exception e) {
                        System.out.println("Please enter an integer");
                    }    
                }
                
                System.out.println("Generating images...");

                counter = 1;

                for(Color[][] c : finished_puzzles) {
                    if(num_pic == 0) break;
                    BufferedImage bufferedImage = new BufferedImage(c[0].length*pixel_size, c.length*pixel_size, BufferedImage.TYPE_INT_RGB);
                    for (int x = 0; x < c.length; x++) {
                        for (int y = 0; y < c[0].length; y++) {

                            for(int i = x*pixel_size; i < x*pixel_size+pixel_size; i++){
                                for(int j = y*pixel_size; j < y*pixel_size+pixel_size; j++){
                                    bufferedImage.setRGB(j, i, c[y][x].getRGB());
                                }
                            }

                        }
                    }
                    try {
                        ImageIO.write(bufferedImage, "jpg", new File("./../solutions/" + counter++ + ".jpg"));
                    } catch (Exception e) {
                        e.printStackTrace();
                        System.out.println("Error occurred during generating images");
                    }
                    num_pic--;
                }
                break;
            } else if (response.toLowerCase().equals("n")) break;
            else {
                System.out.println("Please enter valid input");
                continue;
            }
        }
        scanner.close();
    }
}
